Курс
Задачи
Опросы
Игры
Помощь
График пинков
Стажировка
Друзья
Форум
Чат
Статьи
Истории успеха
Активности
Отзывы
Сообщения
Уведомления
Подписки
Рейтинги
Поддержка
Настройки
Закладки

Лекции
Поиск

Егор
28 уровень
611
452
JavaRush University
Оборачивание исключения
Модуль 1. Java Syntax
23 уровень, 1 лекция
3. Обертывание исключений
Checked-исключения казались классной вещью в теории и оказались полным разочарованием на практике.

Допустим, у вас в проекте есть суперпопулярный метод, который вызывается из сотен мест программы. И вы решили добавить в него новое checked-исключение. И вполне может оказаться, что это checked-исключение действительно такое важное и особенное, что только метод main() знает, что делать в случае захвата этого исключения.

Поэтому вам придется добавить checked-исключение в throws всех методов, которые вызывают ваш суперпопулярный метод. А также в throws всех методов, которые вызывают те методы. И в методы, которые вызывает те методы.

В результате у вас в throws у половины методов проекта будет добавлено новое checked-исключение. А потом окажется, что у вас проект покрыт тестами, и тесты не компилируются. И вам придется править throws еще и в тестах.

А потом весь ваш код (изменения в сотнях файлов) должны будут ревьюить другие программисты. И тут мы задаем себе вопрос: а ради чего мы вносили в проект дохреналион изменений? День(дни?) работы, сломанные тесты, и все ради добавления одного checked-исключения?

А ведь есть еще проблемы с наследованием и переопределением методов. Проблем от checked-исключений гораздо больше, чем пользы. В общем, сейчас мало кто их любит и мало кто использует.

Однако все еще много кода (в том числе и код стандартных библиотек Java) содержат эти самые checked-исключения. И что же с ними делать? Игнорировать нельзя, обрабатывать – неизвестно как.

Java-программисты предложили «заворачивать» checked-исключения внутрь RuntimeException. Другими словами, перехватывать все checked-исключения, создавать вместо них unchecked-исключения (например, RuntimeException) и выбрасывать уже их. Выглядит это все примерно так:

try
{
   код, где может возникнуть checked-исключение
}
catch(Exception exp)
{
   throw new RuntimeException(exp);
}
Не сильно красивое решение, но ничего криминального: исключение просто положили внутрь исключения RuntimeException.

При желании его можно оттуда легко достать. Пример:

Код	Примечание
try
{
   // код где мы запаковали checked исключение
   // в RuntimeException
}
catch(RuntimeException e)
{
   Throwable cause = e.getCause();
   if (cause instanceof Exception)
   {
      Exception exp = (Exception) cause;
      // тут код по обработке Exception
   }
}







Получаем исключение, сохраненное внутри объекта RuntimeException. cause может быть null

Определяем его тип и преобразовываем к переменной checked-типа.
MEDIUM
1
Задача
Модуль 1. Java Syntax,  23 уровень,  1 лекция
Оборачивание исключений
В методе copyFile перехвати исключения, которые бросают методы readFile и writeFile. Перехваченные исключения оберни в RuntimeException и пробрось дальше.
MEDIUM
1
Задача
Модуль 1. Java Syntax,  23 уровень,  1 лекция
Распаковка исключений
В методе main перехвати RuntimeException. Определи, какое исключение в нем сохранено. Если это FileNotFoundException, выведи в консоли сообщение: "Не удалось прочесть файл.", а если FileSystemException — "Не удалось записать в файл.".
+17
Комментарии (1)
Егор
Введите текст комментария
Сергей
Уровень 77
2 июня, 12:41
System.err.println(FAILED_TO_READ);

Странный валидатор, так не пропускает, нужно именно out писать.
Ответить
0
ОБУЧЕНИЕ
Курсы программирования
Курс Java
Помощь по задачам
Подписки
Задачи-игры
СООБЩЕСТВО
Пользователи
Статьи
Форум
Чат
Истории успеха
Активности
КОМПАНИЯ
О нас
Контакты
Отзывы
FAQ
Поддержка
JavaRushJavaRush — это интерактивный онлайн-курс по изучению Java-программирования c нуля. Он содержит 1200 практических задач с проверкой решения в один клик, необходимый минимум теории по основам Java и мотивирующие фишки, которые помогут пройти курс до конца: игры, опросы, интересные проекты и статьи об эффективном обучении и карьере Java‑девелопера.
ПОДПИСЫВАЙТЕСЬ
ЯЗЫК ИНТЕРФЕЙСА

Русский
"Программистами не рождаются" © 2022 JavaRush
СКАЧИВАЙТЕ НАШИ ПРИЛОЖЕНИЯ
Google Play
App Store
MastercardVisa